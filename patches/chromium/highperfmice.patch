From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aidan <aidan.smith@neuralink.com>
Date: Tue, 12 Mar 2024 16:08:23 -0400
Subject: highperfmice


diff --git a/third_party/blink/renderer/core/timing/time_clamper.cc b/third_party/blink/renderer/core/timing/time_clamper.cc
index 960167cb7b6c843caffb99f6c57ccdc4b6e0e50f..3dc8240f19bd92c5d2683779ac2cdb1343ea584e 100644
--- a/third_party/blink/renderer/core/timing/time_clamper.cc
+++ b/third_party/blink/renderer/core/timing/time_clamper.cc
@@ -11,10 +11,6 @@
 
 namespace blink {
 
-namespace {
-const int64_t kTenLowerDigitsMod = 10000000000;
-}  // namespace
-
 TimeClamper::TimeClamper() : secret_(base::RandUint64()) {}
 
 // This is using int64 for timestamps, because https://bit.ly/doubles-are-bad
@@ -22,47 +18,9 @@ base::TimeDelta TimeClamper::ClampTimeResolution(
     base::TimeDelta time,
     bool cross_origin_isolated_capability) const {
   int64_t time_microseconds = time.InMicroseconds();
-  bool was_negative = false;
-
-  // If the input time is negative, turn it to a positive one and keep track of
-  // that.
-  if (time_microseconds < 0) {
-    was_negative = true;
-    time_microseconds = -time_microseconds;
-  }
-
-  // Split the time_microseconds to lower and upper digits to prevent uniformity
-  // distortion in large numbers. We will clamp the lower digits portion and
-  // later add on the upper digits portion.
-  int64_t time_lower_digits = time_microseconds % kTenLowerDigitsMod;
-  int64_t time_upper_digits = time_microseconds - time_lower_digits;
-
-  // Determine resolution based on the context's cross-origin isolation
-  // capability. https://w3c.github.io/hr-time/#dfn-coarsen-time
-  int resolution = cross_origin_isolated_capability
-                       ? kFineResolutionMicroseconds
-                       : kCoarseResolutionMicroseconds;
-
-  // Clamped the time based on the resolution.
-  int64_t clamped_time = time_lower_digits - time_lower_digits % resolution;
-
-  // Determine if the clamped number should be clamped up, rather than down.
-  // The threshold to determine that is a random number smaller than resolution,
-  // such that the probability of clamped time being clamped up rather than
-  // down is proportional to its distance from the clamped_down time.
-  // As such it remains a double, in order to guarantee that distribution,
-  // and the clamping's uniformity.
-  double tick_threshold = ThresholdFor(clamped_time, resolution);
-  if (time_lower_digits >= tick_threshold)
-    clamped_time += resolution;
-
-  // Add back the upper digits portion.
-  clamped_time += time_upper_digits;
 
-  // Flip the number back to being negative if it started that way.
-  if (was_negative)
-    clamped_time = -clamped_time;
-  return base::Microseconds(clamped_time);
+  // this change to time clamping made for neuralink's custom electron
+  return base::Microseconds(time_microseconds);
 }
 
 inline double TimeClamper::ThresholdFor(int64_t clamped_time,
diff --git a/third_party/blink/renderer/platform/widget/input/main_thread_event_queue.cc b/third_party/blink/renderer/platform/widget/input/main_thread_event_queue.cc
index 8f1575bf4dfa60925a08b1181d73ee7fb227257f..eb96975cdffaf48b94720a195313da9bddc1a44f 100644
--- a/third_party/blink/renderer/platform/widget/input/main_thread_event_queue.cc
+++ b/third_party/blink/renderer/platform/widget/input/main_thread_event_queue.cc
@@ -116,50 +116,8 @@ class QueuedWebInputEvent : public MainThreadEventQueueTask {
   }
 
   FilterResult FilterNewEvent(MainThreadEventQueueTask* other_task) override {
-    if (!other_task->IsWebInputEvent())
-      return FilterResult::StopIterating;
-
-    QueuedWebInputEvent* other_event =
-        static_cast<QueuedWebInputEvent*>(other_task);
-    if (other_event->event_->Event().GetType() ==
-        WebInputEvent::Type::kTouchScrollStarted) {
-      return HandleTouchScrollStartQueued();
-    }
-
-    if (!event_->Event().IsSameEventClass(other_event->event_->Event()))
-      return FilterResult::KeepIterating;
-
-    if (!event_->CanCoalesceWith(*other_event->event_)) {
-      // Two pointerevents may not be able to coalesce but we should continue
-      // looking further down the queue if both of them were rawupdate or move
-      // events and only their pointer_type, id, or event_type was different.
-      if (AreCoalescablePointerRawUpdateEvents(*other_event))
-        return FilterResult::KeepIterating;
-      return FilterResult::StopIterating;
-    }
-
-    // If the other event was blocking store its callback to call later, but we
-    // also save the trace_id to ensure the flow events correct show the
-    // critical path.
-    if (other_event->callback_) {
-      blocking_coalesced_callbacks_.emplace_back(
-          std::move(other_event->callback_),
-          other_event->event_->latency_info().trace_id());
-    }
-
-    known_by_scheduler_count_ += other_event->known_by_scheduler_count_;
-    event_->CoalesceWith(*other_event->event_);
-    auto* metrics = metrics_ ? metrics_->AsScrollUpdate() : nullptr;
-    auto* other_metrics = other_event->metrics_
-                              ? other_event->metrics_->AsScrollUpdate()
-                              : nullptr;
-    if (metrics && other_metrics)
-      metrics->CoalesceWith(*other_metrics);
-
-    // The newest event (|other_item|) always wins when updating fields.
-    originally_cancelable_ = other_event->originally_cancelable_;
-
-    return FilterResult::CoalescedEvent;
+    // change made for n7k electron
+    return FilterResult::StopIterating;
   }
 
   bool IsWebInputEvent() const override { return true; }
